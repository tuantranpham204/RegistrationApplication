import { IBaseView, IJetApp, IJetURL, IJetView, IRoute, ISubView, ISubViewInfo, IWebixFacade } from "./interfaces";
export declare abstract class JetBase implements IJetView {
    app: IJetApp;
    webix: IWebixFacade;
    webixJet: boolean;
    protected _name: string;
    protected _parent: IJetView;
    protected _container: HTMLElement | ISubView;
    protected _root: IBaseView;
    protected _events: {
        id: string;
        obj: any;
    }[];
    protected _subs: {
        [name: string]: ISubView;
    };
    protected _initUrl: IJetURL;
    protected _segment: IRoute;
    private _data;
    constructor(webix: IWebixFacade, config?: any);
    getRoot(): IBaseView;
    destructor(): void;
    setParam(id: string, value: any, url?: boolean): void | Promise<any>;
    getParam(id: string, parent: boolean): any;
    getUrl(): IJetURL;
    getUrlString(): string;
    getParentView(): IJetView;
    $$<T extends IBaseView>(id: string | IBaseView): T;
    on(obj: any, name: any, code: any): any;
    contains(view: IJetView): boolean;
    getSubView(name?: string): IJetView;
    getSubViewInfo(name?: string): ISubViewInfo;
    abstract refresh(): any;
    abstract show(path: any, config?: any): any;
    abstract render(root?: string | HTMLElement | ISubView, url?: IRoute, parent?: IJetView): Promise<IBaseView>;
    protected _detachEvents(): void;
    protected _destroySubs(): void;
    protected _init_url_data(): void;
    protected _getDefaultSub(): any;
    protected _routed_view(): any;
}
