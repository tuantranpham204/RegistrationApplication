import { JetBase } from "./JetBase";
import { IBaseConfig, IBaseView, IJetApp, IJetURL, IJetView, IJetViewFactory, ISubView, IUIConfig, IRoute, IJetUrlTarget } from "./interfaces";
export declare class JetView extends JetBase {
    private _children;
    constructor(app: IJetApp, config: any);
    ui(ui: IBaseConfig | IJetViewFactory, config?: IUIConfig): IBaseView | IJetView;
    show(path: any, config?: any): Promise<any>;
    _show(segment: IRoute, path: IJetUrlTarget, view: IJetView): Promise<void>;
    init(_$view: IBaseView, _$: IJetURL): void;
    ready(_$view: IBaseView, _$url: IJetURL): void;
    config(): any;
    urlChange(_$view: IBaseView, _$url: IJetURL): void;
    destroy(): void;
    destructor(): void;
    use(plugin: any, config: any): void;
    refresh(): Promise<IBaseView>;
    render(root: string | HTMLElement | ISubView, url: IRoute, parent?: IJetView): Promise<IBaseView>;
    protected _render(url: IRoute): Promise<IBaseView>;
    protected _render_final(config: any, url: IRoute): Promise<any>;
    protected _init(view: IBaseView, url: IRoute): void;
    protected _urlChange(): Promise<any>;
    protected _renderFrameLock(key: string, frame: ISubView, path: IJetUrlTarget): Promise<any>;
    protected _renderFrame(key: string, frame: ISubView, path: IJetUrlTarget): Promise<any>;
    private _initError;
    private _createSubView;
    private _destroyKids;
}
