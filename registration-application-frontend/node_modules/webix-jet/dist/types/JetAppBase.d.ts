import { JetBase } from "./JetBase";
import { IBaseView, IJetApp, IJetConfig, IJetRouter, IJetURL, IJetURLChunk, IHash, IJetView, IRoute, ISubView, IViewConfig } from "./interfaces";
export declare class JetAppBase extends JetBase implements IJetView {
    config: IJetConfig;
    app: IJetApp;
    ready: Promise<any>;
    callEvent: (name: string, parameters: any[]) => boolean;
    attachEvent: (name: string, handler: any) => void;
    private $router;
    private _services;
    private _subSegment;
    constructor(config?: any);
    getUrl(): IJetURL;
    getUrlString(): string;
    getService(name: string): any;
    setService(name: string, handler: any): void;
    destructor(): void;
    copyConfig(obj: any, target: any, config: IViewConfig): any;
    getRouter(): IJetRouter;
    clickHandler(e: Event, target?: HTMLElement): void;
    getRoot(): IBaseView;
    refresh(): Promise<any>;
    loadView(url: string): Promise<IJetView>;
    _forView(target: HTMLElement, handler: any): void;
    _loadViewDynamic(url: any): any;
    createFromURL(chunk: IJetURLChunk): Promise<IJetView>;
    _override(ui: any): any;
    createView(ui: any, name?: string, params?: IHash): any;
    show(url: string, config?: any): Promise<any>;
    trigger(name: string, ...rest: any[]): void;
    apply(name: string, data: any[]): void;
    action(name: string): any;
    on(name: string, handler: any): void;
    use(plugin: any, config: any): void;
    error(name: string, er: any[]): void;
    render(root?: string | HTMLElement | ISubView, url?: IRoute | string, config?: any): Promise<IBaseView>;
    getSubView(): IJetView;
    require(type: string, url: string): any;
    private _first_start;
    private _loadError;
    private addSubView;
}
